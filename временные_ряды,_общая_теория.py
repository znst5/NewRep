# -*- coding: utf-8 -*-
"""Временные ряды, общая теория.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CqLW1byEaoT3uPDNbBoH_XMf1fSZTuJi
"""

import pandas as pd

sales_of_company_x = pd.read_csv("monthly-sales-of-company-x-jan-6.csv")
robberies_in_boston = pd.read_csv("monthly-boston-armed-robberies-j.csv")
airlines_passengers = pd.read_csv("international-airline-passengers.csv")
mean_monthly_temp = pd.read_csv("mean-monthly-air-temperature-deg.csv")
dowjones_closing = pd.read_csv("weekly-closings-of-the-dowjones-.csv")
female_births = pd.read_csv("daily-total-female-births-in-cal.csv")

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from statsmodels.tsa.stattools import adfuller
import statsmodels.api as sm
import statsmodels.tsa.api as smt
from statsmodels.tsa.stattools import adfuller
import matplotlib.pyplot as plt
from scipy.stats import boxcox
# %matplotlib inline

def test_stationarity(timeseries):
    print('Results of Dickey-Fuller Test:')
    dftest = adfuller(timeseries, autolag='AIC')
    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic', 'p-value', '#Lags Used', 'Number of Observations Used'])
    for [key, value] in dftest[4].items():
        dfoutput['Critical Value (%s)' % key] = value
    print(dfoutput)

def tsplot(y, lags=None, figsize=(10, 6), style='bmh'):
    test_stationarity(y)
    if not isinstance(y, pd.Series):
        y = pd.Series(y)
    with plt.style.context(style):
        plt.figure(figsize=figsize)
        layout = (4, 1)
        ts_ax = plt.subplot2grid(layout, (0, 0), rowspan=2)
        acf_ax = plt.subplot2grid(layout, (2, 0))
        pacf_ax = plt.subplot2grid(layout, (3, 0))

        y.plot(ax=ts_ax, color='blue', label='Or')
        ts_ax.set_title('Original')

        smt.graphics.plot_acf(y, lags=lags, ax=acf_ax, alpha=0.05)
        smt.graphics.plot_pacf(y, lags=lags, ax=pacf_ax, alpha=0.05)

        plt.tight_layout()
    return

"""# monthly-sales-of-company-x-jan-6"""

sales_of_company_x.head()

sales_of_company_x = sales_of_company_x['Count']

tsplot(sales_of_company_x)

sales_of_company_x = boxcox(sales_of_company_x, 0)

tsplot(sales_of_company_x)

sales_of_company_x = sales_of_company_x[1:] - sales_of_company_x[:-1]

tsplot(sales_of_company_x)

sales_of_company_x = sales_of_company_x[12:] - sales_of_company_x[:-12]

tsplot(sales_of_company_x)

"""# monthly-boston-armed-robberies-j"""

robberies_in_boston.head()

robberies_in_boston = robberies_in_boston['Count']

tsplot(robberies_in_boston)

robberies_in_boston = boxcox(robberies_in_boston, 0)

tsplot(robberies_in_boston)

robberies_in_boston = robberies_in_boston[1:] - robberies_in_boston[:-1]

tsplot(robberies_in_boston)

robberies_in_boston = robberies_in_boston[12:] - robberies_in_boston[:-12]

tsplot(robberies_in_boston)

"""# international-airline-passengers"""

airlines_passengers.head()

pd.isna(airlines_passengers['International airline passengers: monthly totals in thousands. Jan 49 ? Dec 60'])

airlines_passengers = airlines_passengers.drop(index=[144])

airlines_passengers = airlines_passengers['International airline passengers: monthly totals in thousands. Jan 49 ? Dec 60']

tsplot(airlines_passengers)

airlines_passengers = boxcox(airlines_passengers, 0)

tsplot(airlines_passengers)

airlines_passengers = airlines_passengers[1:] - airlines_passengers[:-1]

tsplot(airlines_passengers)

airlines_passengers = airlines_passengers[12:] - airlines_passengers[:-12]

tsplot(airlines_passengers)

"""# mean-monthly-air-temperature-deg"""

mean_monthly_temp.head()

mean_monthly_temp = mean_monthly_temp['Deg']

tsplot(mean_monthly_temp)

mean_monthly_temp = boxcox(mean_monthly_temp, 0)

tsplot(mean_monthly_temp)

mean_monthly_temp = mean_monthly_temp[1:] - mean_monthly_temp[:-1]

tsplot(mean_monthly_temp)

mean_monthly_temp = mean_monthly_temp[12:] - mean_monthly_temp[:-12]

tsplot(mean_monthly_temp)

"""# weekly-closings-of-the-dowjones-"""

dowjones_closing.tail()

dowjones_closing = dowjones_closing['Close']

tsplot(dowjones_closing)

dowjones_closing = boxcox(dowjones_closing, 0)

tsplot(dowjones_closing)

dowjones_closing = dowjones_closing[1:] - dowjones_closing[:-1]

tsplot(dowjones_closing)

dowjones_closing = dowjones_closing[4:] - dowjones_closing[:-4]

tsplot(dowjones_closing)

"""# daily-total-female-births-in-cal"""

female_births.tail()

female_births = female_births['Count']

tsplot(female_births)

female_births = boxcox(female_births, 0)

tsplot(female_births)

female_births = female_births[1:] - female_births[:-1]

tsplot(female_births)

female_births = female_births[31:] - female_births[:-31]

tsplot(female_births)